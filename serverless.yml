# BNDS API

# API data
service: bnds
app: bnds
useDotenv: true
frameworkVersion: '2'

# Provider configuration
provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, self:custom.defaultStage}

  # Environment variables
  environment:
    NODE_ENV: ${self:provider.stage}
    DYNAMODB_ENDPOINT: ${self:custom.dynamoEndpoint.${opt:stage, self:custom.defaultStage}}

  # Usage roles
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:*
      Resource: "*"

# Custom config
custom:
  defaultStage: offline

  # Local DynamoDB config
  dynamodb:
    stages:
      - offline
    start:
      migrate: true
      inMemory: false

  # Endpoints configuration
  dynamoEndpoint:
    prod: https://dynamodb.us-east-1.amazonaws.com
    dev: https://dynamodb.us-east-1.amazonaws.com
    staging: https://dynamodb.us-east-1.amazonaws.com
    offline: http://localhost:8000
  authorizer:
    prod: arn:aws:cognito-idp:us-east-1:243627966343:userpool/us-east-1_uJNhQMaj5
    dev: arn:aws:cognito-idp:us-east-1:243627966343:userpool/us-east-1_uJNhQMaj5
    staging: arn:aws:cognito-idp:us-east-1:243627966343:userpool/us-east-1_uJNhQMaj5
    offline: arn:aws:cognito-idp:us-east-1:243627966343:userpool/us-east-1_uJNhQMaj5

# API Functions
functions:

  # /frequency

  # LIST all frequencies
  getFrequencies:
    handler: src/frequency/get.getFrequencies
    events:
      - http:
          method: get
          path: frequency
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}
  # CREATE a frequency
  createFrequency:
    handler: src/frequency/post.createFrequency
    events:
      - http:
          method: post
          path: frequency
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}
  # READ a frequency
  getFrequency:
    handler: src/frequency/get.getFrequency
    events:
      - http:
          method: get
          path: frequency/{id}
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}
  # UPDATE a frequency
  updateFrequency:
    handler: src/frequency/put.updateFrequency
    events:
      - http:
          method: put
          path: frequency/{id}
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}
  # DELETE a frequency
  deleteFrequency:
    handler: src/frequency/delete.deleteFrequency
    events:
      - http:
          method: delete
          path: frequency/{id}
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}

  # /generation

  # LIST all generations
  listGenerations:
    handler: src/generation/get.listGenerations
    events:
      - http:
          method: get
          path: generation
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}
  # CREATE a generation
  createGeneration:
    handler: src/generation/post.createGeneration
    events:
      - http:
          method: post
          path: generation
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}
  # READ a generation
  getGeneration:
    handler: src/generation/get.getGeneration
    events:
      - http:
          method: get
          path: generation/{id}
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}
  # UPDATE a generation
  updateGeneration:
    handler: src/generation/put.updateGeneration
    events:
      - http:
          method: put
          path: generation/{id}
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}
  # DELETE a generation
  deleteGeneration:
    handler: src/generation/delete.deleteGeneration
    events:
      - http:
          method: delete
          path: generation/{id}
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}

  # /technology

  # LIST all technologies
  listTechnologies:
    handler: src/technology/get.listTechnologies
    events:
      - http:
          method: get
          path: technology
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}
  # CREATE a technology
  createTechnology:
    handler: src/technology/post.createTechnology
    events:
      - http:
          method: post
          path: technology
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}
  # READ a technology
  getTechnology:
    handler: src/technology/get.getTechnology
    events:
      - http:
          method: get
          path: technology/{id}
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}
  # UPDATE a technology
  updateTechnology:
    handler: src/technology/put.updateTechnology
    events:
      - http:
          method: put
          path: technology/{id}
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}
  # DELETE a technology
  deleteTechnology:
    handler: src/technology/delete.deleteTechnology
    events:
      - http:
          method: delete
          path: technology/{id}
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}

  # /operator

  # LIST all operators
  listOperators:
    handler: src/operator/get.listOperators
    events:
      - http:
          method: get
          path: operator
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}
  # CREATE an operator
  createOperator:
    handler: src/operator/post.createOperator
    events:
      - http:
          method: post
          path: operator
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}
  # READ an operator
  getOperator:
    handler: src/operator/get.getOperator
    events:
      - http:
          method: get
          path: operator/{id}
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}
  # UPDATE an operator
  updateOperator:
    handler: src/operator/put.updateOperator
    events:
      - http:
          method: put
          path: operator/{id}
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}
  # DELETE an operator
  deleteOperator:
    handler: src/operator/delete.deleteOperator
    events:
      - http:
          method: delete
          path: operator/{id}
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}

  # /comparator

  # Compare a phone and an operator
  compare:
    handler: src/comparator/get.compare
    events:
      - http:
          method: get
          path: compare/{phone}/{operator}
          cors: true

  # /login

  # Login the user
  loginUser:
    handler: src/login/post.loginUser
    events:
      - http:
          method: post
          path: login
          cors: true
  # Refresh the idToken using the refreshToken
  refreshToken:
    handler: src/login/post.refreshToken
    events:
      - http:
          method: post
          path: refresh
          cors: true

  # /phone

  # Get a phone data
  getPhoneData:
    handler: src/phone/get.getPhoneData
    events:
      - http:
          method: get
          path: phone/{fullName}
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}
  autocomplete:
    handler: src/phone/get.autocomplete
    events:
      - http:
          method: get
          path: phone/autocomplete/{fullName}
          cors: true
  createPhone:
    handler: src/phone/post.createPhone
    events:
      - http:
          method: post
          path: phone
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.${opt:stage, self:custom.defaultStage}}

# Resources
resources:
  Resources:
    ## DYNAMODB TABLES
    # Settings table
    settingsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: settings-${opt:stage, self:custom.defaultStage}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    # Phones table
    phonesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: phones-${opt:stage, self:custom.defaultStage}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    # Operator table
    operatorsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: operators-${opt:stage, self:custom.defaultStage}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    # Users table
    usersTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: users-${opt:stage, self:custom.defaultStage}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    ## COGNITO USER POOLS



# Plugins
plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-offline-dotenv
