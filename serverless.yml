# BNDS API

service: bnds
app: bnds
useDotenv: true
frameworkVersion: '2'

# Provider configuration
provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, self:custom.defaultStage}

  # Environment variables
  environment:
    NODE_ENV: ${self:provider.stage}
    DYNAMODB_ENDPOINT: ${self:custom.dynamoEndpoint.${opt:stage, self:custom.defaultStage}}

  # Usage roles
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:*
      Resource: "*"

custom:
  defaultStage: offline

  # Local DynamoDB config
  dynamodb:
    stages:
      - offline
    start:
      migrate: true
      inMemory: false

  # Endpoints configuration
  dynamoEndpoint:
    prod: https://dynamodb.us-east-1.amazonaws.com
    dev: https://dynamodb.us-east-1.amazonaws.com
    staging: https://dynamodb.us-east-1.amazonaws.com
    offline: http://localhost:8000

functions:
  # /phone
  # Get a phone data
  getPhoneData:
    handler: src/phone/get.getPhoneData
    events:
      - http:
          method: get
          path: phone/{fullName}
          cors: true
  autocomplete:
    handler: src/phone/get.autocomplete
    events:
      - http:
          method: get
          path: phone/autocomplete/{fullName}
          cors: true
  createPhone:
    handler: src/phone/post.createPhone
    events:
      - http:
          method: post
          path: phone
          cors: true

  # /settings/bootstrapSettings
  # Bootstrap the settings table with basic data
  bootstrapSettings:
    handler: src/settings/post.bootstrapSettings
    events:
      - http:
          method: post
          path: settings/bootstrap
          cors: true


  # /frequency
  # Get all the frequencies and their respective IDs
  getFrequencies:
    handler: src/frequency/get.getFrequencies
    events:
      - http:
          method: get
          path: frequency
          cors: true

  # /operator
  # Get all the operators
  getOperators:
    handler: src/operator/get.getOperators
    events:
      - http:
          method: get
          path: operator
          cors: true
  # Get all the operators
  createOperator:
    handler: src/operator/post.createOperator
    events:
      - http:
          method: post
          path: operator
          cors: true
  # /comparator
  # COmpare a phone and an operator
  compare:
    handler: src/comparator/get.compare
    events:
      - http:
          method: get
          path: compare/{phone}/{operator}
          cors: true

# Resources
resources:
  Resources:
    ## DYNAMODB TABLES
    # Settings table
    settingsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: settings-${opt:stage, self:custom.defaultStage}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    # Phones table
    phonesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: phones-${opt:stage, self:custom.defaultStage}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    # Operator table
    operatorsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: operators-${opt:stage, self:custom.defaultStage}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    # Users table
    usersTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: users-${opt:stage, self:custom.defaultStage}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    ## COGNITO USER POOLS

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-offline-dotenv
